// Global default params, used in configs
params {
    // optional file paths [optional input](https://nextflow-io.github.io/patterns/optional-input/)
    atac_file = "$projectDir/assets/NO_FILE"
    gwas_path = "$projectDir/assets/NO_FILE"

    // required parameters
    project_tag = null  // required input: a unique identifier for the project
    tss_file = null  // required input: "/path/to/your/tss_cell_type_exp.txt.gz"
    cell_types = null  // required input: "/path/to/your/tss_cell_type_exp.txt"
    broad_fine_mapping = null  // required input: "/path/to/your/broad_fine_mapping.txt"

    // other default values
    study_id = "${params.project_tag}"  //name of a parquet file or name for the study if params.gwas_path is provided
    gene_chunk_size = 100
    vcf_files_1000G = "/nfs/cellgeni/pipeline-files/1000G/20190312/European/"  // looking for `chr*.maf0.001.vcf.gz` in this folder
}

// Configuring LSF job submission parameters for each process
executor {
  name = 'lsf'
  perJobMemLimit = true
}

singularity {
  enabled     = true
  autoMounts  = true
  cacheDir = '/nfs/cellgeni/singularity/images/'
  runOptions = '-B /lustre,/nfs --nv'
}

process {
  
  container = '/nfs/cellgeni/singularity/images/ADD-NEW-IMAGE.sif'  // <-- Create and add the path to the singularity image

  errorStrategy = 'retry'
  maxRetries    = { task.exitStatus == 130 ? 3 : 1 }  // only retry if memory limit is exceeded

  withName: run_LDSC {
    cpus = 2
    memory = { 20.GB * task.attempt }
    queue = "week"
    maxForks = 10
  }

  withName: collect_LDSC {
    cpus = 2
    memory = { 10.GB * task.attempt }
    queue = "long"
    maxForks = 10
  }

  withName: run_HM {
    cpus = 2
    memory = { 100.GB * task.attempt }
    queue = "normal"
    maxForks = 10
  }

  withName: plot_forest {
      cpus = 2
      memory = { 500.MB * task.attempt }
      queue = "small"
      maxForks = 10
    }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Capturing Nextflow log files into a reports directory
timeline {
   enabled = true
   overwrite = true
   file = "fgwas-reports-${params.project_tag}/timeline.html"
}

report {
   enabled = true
   overwrite = true
   file = "fgwas-reports-${params.project_tag}/report.html"
}

trace {
   enabled = true
   overwrite = true
   file = "fgwas-reports-${params.project_tag}/trace.txt"
}
